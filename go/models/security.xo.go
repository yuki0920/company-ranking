package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// Security represents a row from 'public.securities'.
type Security struct {
	ID           int64     `json:"id"`            // id
	Code         string    `json:"code"`          // code
	Name         string    `json:"name"`          // name
	MarketID     int64     `json:"market_id"`     // market_id
	IndustryCode int       `json:"industry_code"` // industry_code
	CreatedAt    time.Time `json:"created_at"`    // created_at
	UpdatedAt    time.Time `json:"updated_at"`    // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Security] exists in the database.
func (s *Security) Exists() bool {
	return s._exists
}

// Deleted returns true when the [Security] has been marked for deletion
// from the database.
func (s *Security) Deleted() bool {
	return s._deleted
}

// Insert inserts the [Security] to the database.
func (s *Security) Insert(ctx context.Context, db DB) error {
	switch {
	case s._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case s._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.securities (` +
		`code, name, market_id, industry_code, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING id`
	// run
	logf(sqlstr, s.Code, s.Name, s.MarketID, s.IndustryCode, s.CreatedAt, s.UpdatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, s.Code, s.Name, s.MarketID, s.IndustryCode, s.CreatedAt, s.UpdatedAt).Scan(&s.ID); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Update updates a [Security] in the database.
func (s *Security) Update(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case s._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.securities SET ` +
		`code = $1, name = $2, market_id = $3, industry_code = $4, created_at = $5, updated_at = $6 ` +
		`WHERE id = $7`
	// run
	logf(sqlstr, s.Code, s.Name, s.MarketID, s.IndustryCode, s.CreatedAt, s.UpdatedAt, s.ID)
	if _, err := db.ExecContext(ctx, sqlstr, s.Code, s.Name, s.MarketID, s.IndustryCode, s.CreatedAt, s.UpdatedAt, s.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Security] to the database.
func (s *Security) Save(ctx context.Context, db DB) error {
	if s.Exists() {
		return s.Update(ctx, db)
	}
	return s.Insert(ctx, db)
}

// Upsert performs an upsert for [Security].
func (s *Security) Upsert(ctx context.Context, db DB) error {
	switch {
	case s._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.securities (` +
		`id, code, name, market_id, industry_code, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`code = EXCLUDED.code, name = EXCLUDED.name, market_id = EXCLUDED.market_id, industry_code = EXCLUDED.industry_code, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, s.ID, s.Code, s.Name, s.MarketID, s.IndustryCode, s.CreatedAt, s.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, s.ID, s.Code, s.Name, s.MarketID, s.IndustryCode, s.CreatedAt, s.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Delete deletes the [Security] from the database.
func (s *Security) Delete(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return nil
	case s._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.securities ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, s.ID)
	if _, err := db.ExecContext(ctx, sqlstr, s.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	s._deleted = true
	return nil
}

// SecurityByCode retrieves a row from 'public.securities' as a [Security].
//
// Generated from index 'index_securities_on_code'.
func SecurityByCode(ctx context.Context, db DB, code string) (*Security, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, code, name, market_id, industry_code, created_at, updated_at ` +
		`FROM public.securities ` +
		`WHERE code = $1`
	// run
	logf(sqlstr, code)
	s := Security{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, code).Scan(&s.ID, &s.Code, &s.Name, &s.MarketID, &s.IndustryCode, &s.CreatedAt, &s.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}

// SecuritiesByIndustryCode retrieves a row from 'public.securities' as a [Security].
//
// Generated from index 'index_securities_on_industry_code'.
func SecuritiesByIndustryCode(ctx context.Context, db DB, industryCode int) ([]*Security, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, code, name, market_id, industry_code, created_at, updated_at ` +
		`FROM public.securities ` +
		`WHERE industry_code = $1`
	// run
	logf(sqlstr, industryCode)
	rows, err := db.QueryContext(ctx, sqlstr, industryCode)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Security
	for rows.Next() {
		s := Security{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&s.ID, &s.Code, &s.Name, &s.MarketID, &s.IndustryCode, &s.CreatedAt, &s.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &s)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// SecuritiesByMarketID retrieves a row from 'public.securities' as a [Security].
//
// Generated from index 'index_securities_on_market_id'.
func SecuritiesByMarketID(ctx context.Context, db DB, marketID int64) ([]*Security, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, code, name, market_id, industry_code, created_at, updated_at ` +
		`FROM public.securities ` +
		`WHERE market_id = $1`
	// run
	logf(sqlstr, marketID)
	rows, err := db.QueryContext(ctx, sqlstr, marketID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Security
	for rows.Next() {
		s := Security{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&s.ID, &s.Code, &s.Name, &s.MarketID, &s.IndustryCode, &s.CreatedAt, &s.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &s)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// SecurityByName retrieves a row from 'public.securities' as a [Security].
//
// Generated from index 'index_securities_on_name'.
func SecurityByName(ctx context.Context, db DB, name string) (*Security, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, code, name, market_id, industry_code, created_at, updated_at ` +
		`FROM public.securities ` +
		`WHERE name = $1`
	// run
	logf(sqlstr, name)
	s := Security{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, name).Scan(&s.ID, &s.Code, &s.Name, &s.MarketID, &s.IndustryCode, &s.CreatedAt, &s.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}

// SecurityByID retrieves a row from 'public.securities' as a [Security].
//
// Generated from index 'securities_pkey'.
func SecurityByID(ctx context.Context, db DB, id int64) (*Security, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, code, name, market_id, industry_code, created_at, updated_at ` +
		`FROM public.securities ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	s := Security{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&s.ID, &s.Code, &s.Name, &s.MarketID, &s.IndustryCode, &s.CreatedAt, &s.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}

// Industry returns the Industry associated with the [Security]'s (IndustryCode).
//
// Generated from foreign key 'fk_rails_435486d3db'.
func (s *Security) Industry(ctx context.Context, db DB) (*Industry, error) {
	return IndustryByCode(ctx, db, s.IndustryCode)
}
