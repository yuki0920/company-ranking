package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Document represents a row from 'public.documents'.
type Document struct {
	ID                                         int64           `json:"id"`                                                // id
	SecurityCode                               string          `json:"security_code"`                                     // security_code
	DocumentID                                 string          `json:"document_id"`                                       // document_id
	EdinetCode                                 string          `json:"edinet_code"`                                       // edinet_code
	FilerName                                  string          `json:"filer_name"`                                        // filer_name
	PeriodStartedAt                            time.Time       `json:"period_started_at"`                                 // period_started_at
	PeriodEndedAt                              time.Time       `json:"period_ended_at"`                                   // period_ended_at
	DetailsSearchedAt                          sql.NullTime    `json:"details_searched_at"`                               // details_searched_at
	CompanyName                                sql.NullString  `json:"company_name"`                                      // company_name
	CompanyNameEn                              sql.NullString  `json:"company_name_en"`                                   // company_name_en
	HeadOfficeLocation                         sql.NullString  `json:"head_office_location"`                              // head_office_location
	SubmittedAt                                sql.NullTime    `json:"submitted_at"`                                      // submitted_at
	FiscalYear                                 sql.NullString  `json:"fiscal_year"`                                       // fiscal_year
	Representative                             sql.NullString  `json:"representative"`                                    // representative
	NumberOfEmployees                          sql.NullInt64   `json:"number_of_employees"`                               // number_of_employees
	AverageAgeYears                            sql.NullFloat64 `json:"average_age_years"`                                 // average_age_years
	AverageLengthOfServiceYears                sql.NullFloat64 `json:"average_length_of_service_years"`                   // average_length_of_service_years
	AverageAnnualSalary                        sql.NullInt64   `json:"average_annual_salary"`                             // average_annual_salary
	LastYearNetSales                           sql.NullInt64   `json:"last_year_net_sales"`                               // last_year_net_sales
	NetSales                                   sql.NullInt64   `json:"net_sales"`                                         // net_sales
	LastYearOperatingIncome                    sql.NullInt64   `json:"last_year_operating_income"`                        // last_year_operating_income
	OperatingIncome                            sql.NullInt64   `json:"operating_income"`                                  // operating_income
	LastYearOrdinaryIncome                     sql.NullInt64   `json:"last_year_ordinary_income"`                         // last_year_ordinary_income
	OrdinaryIncome                             sql.NullInt64   `json:"ordinary_income"`                                   // ordinary_income
	CreatedAt                                  time.Time       `json:"created_at"`                                        // created_at
	UpdatedAt                                  time.Time       `json:"updated_at"`                                        // updated_at
	CapitalStock                               sql.NullInt64   `json:"capital_stock"`                                     // capital_stock
	NetAssets                                  sql.NullInt64   `json:"net_assets"`                                        // net_assets
	TotalAssets                                sql.NullInt64   `json:"total_assets"`                                      // total_assets
	EquityToAssetRatio                         sql.NullFloat64 `json:"equity_to_asset_ratio"`                             // equity_to_asset_ratio
	RateOfReturnOnEquity                       sql.NullFloat64 `json:"rate_of_return_on_equity"`                          // rate_of_return_on_equity
	PriceEarningsRatio                         sql.NullFloat64 `json:"price_earnings_ratio"`                              // price_earnings_ratio
	NetCashProvidedByUsedInOperatingActivities sql.NullInt64   `json:"net_cash_provided_by_used_in_operating_activities"` // net_cash_provided_by_used_in_operating_activities
	NetCashProvidedByUsedInInvestingActivities sql.NullInt64   `json:"net_cash_provided_by_used_in_investing_activities"` // net_cash_provided_by_used_in_investing_activities
	NetCashProvidedByUsedInFinancingActivities sql.NullInt64   `json:"net_cash_provided_by_used_in_financing_activities"` // net_cash_provided_by_used_in_financing_activities
	CashAndCashEquivalents                     sql.NullInt64   `json:"cash_and_cash_equivalents"`                         // cash_and_cash_equivalents
	ConsolidatedNumberOfEmployees              sql.NullInt64   `json:"consolidated_number_of_employees"`                  // consolidated_number_of_employees
	TotalNumberOfIssuedShares                  sql.NullInt64   `json:"total_number_of_issued_shares"`                     // total_number_of_issued_shares
	PayoutRatio                                sql.NullFloat64 `json:"payout_ratio"`                                      // payout_ratio
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Document] exists in the database.
func (d *Document) Exists() bool {
	return d._exists
}

// Deleted returns true when the [Document] has been marked for deletion
// from the database.
func (d *Document) Deleted() bool {
	return d._deleted
}

// Insert inserts the [Document] to the database.
func (d *Document) Insert(ctx context.Context, db DB) error {
	switch {
	case d._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case d._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.documents (` +
		`security_code, document_id, edinet_code, filer_name, period_started_at, period_ended_at, details_searched_at, company_name, company_name_en, head_office_location, submitted_at, fiscal_year, representative, number_of_employees, average_age_years, average_length_of_service_years, average_annual_salary, last_year_net_sales, net_sales, last_year_operating_income, operating_income, last_year_ordinary_income, ordinary_income, created_at, updated_at, capital_stock, net_assets, total_assets, equity_to_asset_ratio, rate_of_return_on_equity, price_earnings_ratio, net_cash_provided_by_used_in_operating_activities, net_cash_provided_by_used_in_investing_activities, net_cash_provided_by_used_in_financing_activities, cash_and_cash_equivalents, consolidated_number_of_employees, total_number_of_issued_shares, payout_ratio` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38` +
		`) RETURNING id`
	// run
	logf(sqlstr, d.SecurityCode, d.DocumentID, d.EdinetCode, d.FilerName, d.PeriodStartedAt, d.PeriodEndedAt, d.DetailsSearchedAt, d.CompanyName, d.CompanyNameEn, d.HeadOfficeLocation, d.SubmittedAt, d.FiscalYear, d.Representative, d.NumberOfEmployees, d.AverageAgeYears, d.AverageLengthOfServiceYears, d.AverageAnnualSalary, d.LastYearNetSales, d.NetSales, d.LastYearOperatingIncome, d.OperatingIncome, d.LastYearOrdinaryIncome, d.OrdinaryIncome, d.CreatedAt, d.UpdatedAt, d.CapitalStock, d.NetAssets, d.TotalAssets, d.EquityToAssetRatio, d.RateOfReturnOnEquity, d.PriceEarningsRatio, d.NetCashProvidedByUsedInOperatingActivities, d.NetCashProvidedByUsedInInvestingActivities, d.NetCashProvidedByUsedInFinancingActivities, d.CashAndCashEquivalents, d.ConsolidatedNumberOfEmployees, d.TotalNumberOfIssuedShares, d.PayoutRatio)
	if err := db.QueryRowContext(ctx, sqlstr, d.SecurityCode, d.DocumentID, d.EdinetCode, d.FilerName, d.PeriodStartedAt, d.PeriodEndedAt, d.DetailsSearchedAt, d.CompanyName, d.CompanyNameEn, d.HeadOfficeLocation, d.SubmittedAt, d.FiscalYear, d.Representative, d.NumberOfEmployees, d.AverageAgeYears, d.AverageLengthOfServiceYears, d.AverageAnnualSalary, d.LastYearNetSales, d.NetSales, d.LastYearOperatingIncome, d.OperatingIncome, d.LastYearOrdinaryIncome, d.OrdinaryIncome, d.CreatedAt, d.UpdatedAt, d.CapitalStock, d.NetAssets, d.TotalAssets, d.EquityToAssetRatio, d.RateOfReturnOnEquity, d.PriceEarningsRatio, d.NetCashProvidedByUsedInOperatingActivities, d.NetCashProvidedByUsedInInvestingActivities, d.NetCashProvidedByUsedInFinancingActivities, d.CashAndCashEquivalents, d.ConsolidatedNumberOfEmployees, d.TotalNumberOfIssuedShares, d.PayoutRatio).Scan(&d.ID); err != nil {
		return logerror(err)
	}
	// set exists
	d._exists = true
	return nil
}

// Update updates a [Document] in the database.
func (d *Document) Update(ctx context.Context, db DB) error {
	switch {
	case !d._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case d._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.documents SET ` +
		`security_code = $1, document_id = $2, edinet_code = $3, filer_name = $4, period_started_at = $5, period_ended_at = $6, details_searched_at = $7, company_name = $8, company_name_en = $9, head_office_location = $10, submitted_at = $11, fiscal_year = $12, representative = $13, number_of_employees = $14, average_age_years = $15, average_length_of_service_years = $16, average_annual_salary = $17, last_year_net_sales = $18, net_sales = $19, last_year_operating_income = $20, operating_income = $21, last_year_ordinary_income = $22, ordinary_income = $23, created_at = $24, updated_at = $25, capital_stock = $26, net_assets = $27, total_assets = $28, equity_to_asset_ratio = $29, rate_of_return_on_equity = $30, price_earnings_ratio = $31, net_cash_provided_by_used_in_operating_activities = $32, net_cash_provided_by_used_in_investing_activities = $33, net_cash_provided_by_used_in_financing_activities = $34, cash_and_cash_equivalents = $35, consolidated_number_of_employees = $36, total_number_of_issued_shares = $37, payout_ratio = $38 ` +
		`WHERE id = $39`
	// run
	logf(sqlstr, d.SecurityCode, d.DocumentID, d.EdinetCode, d.FilerName, d.PeriodStartedAt, d.PeriodEndedAt, d.DetailsSearchedAt, d.CompanyName, d.CompanyNameEn, d.HeadOfficeLocation, d.SubmittedAt, d.FiscalYear, d.Representative, d.NumberOfEmployees, d.AverageAgeYears, d.AverageLengthOfServiceYears, d.AverageAnnualSalary, d.LastYearNetSales, d.NetSales, d.LastYearOperatingIncome, d.OperatingIncome, d.LastYearOrdinaryIncome, d.OrdinaryIncome, d.CreatedAt, d.UpdatedAt, d.CapitalStock, d.NetAssets, d.TotalAssets, d.EquityToAssetRatio, d.RateOfReturnOnEquity, d.PriceEarningsRatio, d.NetCashProvidedByUsedInOperatingActivities, d.NetCashProvidedByUsedInInvestingActivities, d.NetCashProvidedByUsedInFinancingActivities, d.CashAndCashEquivalents, d.ConsolidatedNumberOfEmployees, d.TotalNumberOfIssuedShares, d.PayoutRatio, d.ID)
	if _, err := db.ExecContext(ctx, sqlstr, d.SecurityCode, d.DocumentID, d.EdinetCode, d.FilerName, d.PeriodStartedAt, d.PeriodEndedAt, d.DetailsSearchedAt, d.CompanyName, d.CompanyNameEn, d.HeadOfficeLocation, d.SubmittedAt, d.FiscalYear, d.Representative, d.NumberOfEmployees, d.AverageAgeYears, d.AverageLengthOfServiceYears, d.AverageAnnualSalary, d.LastYearNetSales, d.NetSales, d.LastYearOperatingIncome, d.OperatingIncome, d.LastYearOrdinaryIncome, d.OrdinaryIncome, d.CreatedAt, d.UpdatedAt, d.CapitalStock, d.NetAssets, d.TotalAssets, d.EquityToAssetRatio, d.RateOfReturnOnEquity, d.PriceEarningsRatio, d.NetCashProvidedByUsedInOperatingActivities, d.NetCashProvidedByUsedInInvestingActivities, d.NetCashProvidedByUsedInFinancingActivities, d.CashAndCashEquivalents, d.ConsolidatedNumberOfEmployees, d.TotalNumberOfIssuedShares, d.PayoutRatio, d.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Document] to the database.
func (d *Document) Save(ctx context.Context, db DB) error {
	if d.Exists() {
		return d.Update(ctx, db)
	}
	return d.Insert(ctx, db)
}

// Upsert performs an upsert for [Document].
func (d *Document) Upsert(ctx context.Context, db DB) error {
	switch {
	case d._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.documents (` +
		`id, security_code, document_id, edinet_code, filer_name, period_started_at, period_ended_at, details_searched_at, company_name, company_name_en, head_office_location, submitted_at, fiscal_year, representative, number_of_employees, average_age_years, average_length_of_service_years, average_annual_salary, last_year_net_sales, net_sales, last_year_operating_income, operating_income, last_year_ordinary_income, ordinary_income, created_at, updated_at, capital_stock, net_assets, total_assets, equity_to_asset_ratio, rate_of_return_on_equity, price_earnings_ratio, net_cash_provided_by_used_in_operating_activities, net_cash_provided_by_used_in_investing_activities, net_cash_provided_by_used_in_financing_activities, cash_and_cash_equivalents, consolidated_number_of_employees, total_number_of_issued_shares, payout_ratio` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`security_code = EXCLUDED.security_code, document_id = EXCLUDED.document_id, edinet_code = EXCLUDED.edinet_code, filer_name = EXCLUDED.filer_name, period_started_at = EXCLUDED.period_started_at, period_ended_at = EXCLUDED.period_ended_at, details_searched_at = EXCLUDED.details_searched_at, company_name = EXCLUDED.company_name, company_name_en = EXCLUDED.company_name_en, head_office_location = EXCLUDED.head_office_location, submitted_at = EXCLUDED.submitted_at, fiscal_year = EXCLUDED.fiscal_year, representative = EXCLUDED.representative, number_of_employees = EXCLUDED.number_of_employees, average_age_years = EXCLUDED.average_age_years, average_length_of_service_years = EXCLUDED.average_length_of_service_years, average_annual_salary = EXCLUDED.average_annual_salary, last_year_net_sales = EXCLUDED.last_year_net_sales, net_sales = EXCLUDED.net_sales, last_year_operating_income = EXCLUDED.last_year_operating_income, operating_income = EXCLUDED.operating_income, last_year_ordinary_income = EXCLUDED.last_year_ordinary_income, ordinary_income = EXCLUDED.ordinary_income, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at, capital_stock = EXCLUDED.capital_stock, net_assets = EXCLUDED.net_assets, total_assets = EXCLUDED.total_assets, equity_to_asset_ratio = EXCLUDED.equity_to_asset_ratio, rate_of_return_on_equity = EXCLUDED.rate_of_return_on_equity, price_earnings_ratio = EXCLUDED.price_earnings_ratio, net_cash_provided_by_used_in_operating_activities = EXCLUDED.net_cash_provided_by_used_in_operating_activities, net_cash_provided_by_used_in_investing_activities = EXCLUDED.net_cash_provided_by_used_in_investing_activities, net_cash_provided_by_used_in_financing_activities = EXCLUDED.net_cash_provided_by_used_in_financing_activities, cash_and_cash_equivalents = EXCLUDED.cash_and_cash_equivalents, consolidated_number_of_employees = EXCLUDED.consolidated_number_of_employees, total_number_of_issued_shares = EXCLUDED.total_number_of_issued_shares, payout_ratio = EXCLUDED.payout_ratio `
	// run
	logf(sqlstr, d.ID, d.SecurityCode, d.DocumentID, d.EdinetCode, d.FilerName, d.PeriodStartedAt, d.PeriodEndedAt, d.DetailsSearchedAt, d.CompanyName, d.CompanyNameEn, d.HeadOfficeLocation, d.SubmittedAt, d.FiscalYear, d.Representative, d.NumberOfEmployees, d.AverageAgeYears, d.AverageLengthOfServiceYears, d.AverageAnnualSalary, d.LastYearNetSales, d.NetSales, d.LastYearOperatingIncome, d.OperatingIncome, d.LastYearOrdinaryIncome, d.OrdinaryIncome, d.CreatedAt, d.UpdatedAt, d.CapitalStock, d.NetAssets, d.TotalAssets, d.EquityToAssetRatio, d.RateOfReturnOnEquity, d.PriceEarningsRatio, d.NetCashProvidedByUsedInOperatingActivities, d.NetCashProvidedByUsedInInvestingActivities, d.NetCashProvidedByUsedInFinancingActivities, d.CashAndCashEquivalents, d.ConsolidatedNumberOfEmployees, d.TotalNumberOfIssuedShares, d.PayoutRatio)
	if _, err := db.ExecContext(ctx, sqlstr, d.ID, d.SecurityCode, d.DocumentID, d.EdinetCode, d.FilerName, d.PeriodStartedAt, d.PeriodEndedAt, d.DetailsSearchedAt, d.CompanyName, d.CompanyNameEn, d.HeadOfficeLocation, d.SubmittedAt, d.FiscalYear, d.Representative, d.NumberOfEmployees, d.AverageAgeYears, d.AverageLengthOfServiceYears, d.AverageAnnualSalary, d.LastYearNetSales, d.NetSales, d.LastYearOperatingIncome, d.OperatingIncome, d.LastYearOrdinaryIncome, d.OrdinaryIncome, d.CreatedAt, d.UpdatedAt, d.CapitalStock, d.NetAssets, d.TotalAssets, d.EquityToAssetRatio, d.RateOfReturnOnEquity, d.PriceEarningsRatio, d.NetCashProvidedByUsedInOperatingActivities, d.NetCashProvidedByUsedInInvestingActivities, d.NetCashProvidedByUsedInFinancingActivities, d.CashAndCashEquivalents, d.ConsolidatedNumberOfEmployees, d.TotalNumberOfIssuedShares, d.PayoutRatio); err != nil {
		return logerror(err)
	}
	// set exists
	d._exists = true
	return nil
}

// Delete deletes the [Document] from the database.
func (d *Document) Delete(ctx context.Context, db DB) error {
	switch {
	case !d._exists: // doesn't exist
		return nil
	case d._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.documents ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, d.ID)
	if _, err := db.ExecContext(ctx, sqlstr, d.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	d._deleted = true
	return nil
}

// DocumentByID retrieves a row from 'public.documents' as a [Document].
//
// Generated from index 'documents_pkey'.
func DocumentByID(ctx context.Context, db DB, id int64) (*Document, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, security_code, document_id, edinet_code, filer_name, period_started_at, period_ended_at, details_searched_at, company_name, company_name_en, head_office_location, submitted_at, fiscal_year, representative, number_of_employees, average_age_years, average_length_of_service_years, average_annual_salary, last_year_net_sales, net_sales, last_year_operating_income, operating_income, last_year_ordinary_income, ordinary_income, created_at, updated_at, capital_stock, net_assets, total_assets, equity_to_asset_ratio, rate_of_return_on_equity, price_earnings_ratio, net_cash_provided_by_used_in_operating_activities, net_cash_provided_by_used_in_investing_activities, net_cash_provided_by_used_in_financing_activities, cash_and_cash_equivalents, consolidated_number_of_employees, total_number_of_issued_shares, payout_ratio ` +
		`FROM public.documents ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	d := Document{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&d.ID, &d.SecurityCode, &d.DocumentID, &d.EdinetCode, &d.FilerName, &d.PeriodStartedAt, &d.PeriodEndedAt, &d.DetailsSearchedAt, &d.CompanyName, &d.CompanyNameEn, &d.HeadOfficeLocation, &d.SubmittedAt, &d.FiscalYear, &d.Representative, &d.NumberOfEmployees, &d.AverageAgeYears, &d.AverageLengthOfServiceYears, &d.AverageAnnualSalary, &d.LastYearNetSales, &d.NetSales, &d.LastYearOperatingIncome, &d.OperatingIncome, &d.LastYearOrdinaryIncome, &d.OrdinaryIncome, &d.CreatedAt, &d.UpdatedAt, &d.CapitalStock, &d.NetAssets, &d.TotalAssets, &d.EquityToAssetRatio, &d.RateOfReturnOnEquity, &d.PriceEarningsRatio, &d.NetCashProvidedByUsedInOperatingActivities, &d.NetCashProvidedByUsedInInvestingActivities, &d.NetCashProvidedByUsedInFinancingActivities, &d.CashAndCashEquivalents, &d.ConsolidatedNumberOfEmployees, &d.TotalNumberOfIssuedShares, &d.PayoutRatio); err != nil {
		return nil, logerror(err)
	}
	return &d, nil
}

// DocumentByDocumentID retrieves a row from 'public.documents' as a [Document].
//
// Generated from index 'index_documents_on_document_id'.
func DocumentByDocumentID(ctx context.Context, db DB, documentID string) (*Document, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, security_code, document_id, edinet_code, filer_name, period_started_at, period_ended_at, details_searched_at, company_name, company_name_en, head_office_location, submitted_at, fiscal_year, representative, number_of_employees, average_age_years, average_length_of_service_years, average_annual_salary, last_year_net_sales, net_sales, last_year_operating_income, operating_income, last_year_ordinary_income, ordinary_income, created_at, updated_at, capital_stock, net_assets, total_assets, equity_to_asset_ratio, rate_of_return_on_equity, price_earnings_ratio, net_cash_provided_by_used_in_operating_activities, net_cash_provided_by_used_in_investing_activities, net_cash_provided_by_used_in_financing_activities, cash_and_cash_equivalents, consolidated_number_of_employees, total_number_of_issued_shares, payout_ratio ` +
		`FROM public.documents ` +
		`WHERE document_id = $1`
	// run
	logf(sqlstr, documentID)
	d := Document{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, documentID).Scan(&d.ID, &d.SecurityCode, &d.DocumentID, &d.EdinetCode, &d.FilerName, &d.PeriodStartedAt, &d.PeriodEndedAt, &d.DetailsSearchedAt, &d.CompanyName, &d.CompanyNameEn, &d.HeadOfficeLocation, &d.SubmittedAt, &d.FiscalYear, &d.Representative, &d.NumberOfEmployees, &d.AverageAgeYears, &d.AverageLengthOfServiceYears, &d.AverageAnnualSalary, &d.LastYearNetSales, &d.NetSales, &d.LastYearOperatingIncome, &d.OperatingIncome, &d.LastYearOrdinaryIncome, &d.OrdinaryIncome, &d.CreatedAt, &d.UpdatedAt, &d.CapitalStock, &d.NetAssets, &d.TotalAssets, &d.EquityToAssetRatio, &d.RateOfReturnOnEquity, &d.PriceEarningsRatio, &d.NetCashProvidedByUsedInOperatingActivities, &d.NetCashProvidedByUsedInInvestingActivities, &d.NetCashProvidedByUsedInFinancingActivities, &d.CashAndCashEquivalents, &d.ConsolidatedNumberOfEmployees, &d.TotalNumberOfIssuedShares, &d.PayoutRatio); err != nil {
		return nil, logerror(err)
	}
	return &d, nil
}

// DocumentsBySecurityCode retrieves a row from 'public.documents' as a [Document].
//
// Generated from index 'index_documents_on_security_code'.
func DocumentsBySecurityCode(ctx context.Context, db DB, securityCode string) ([]*Document, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, security_code, document_id, edinet_code, filer_name, period_started_at, period_ended_at, details_searched_at, company_name, company_name_en, head_office_location, submitted_at, fiscal_year, representative, number_of_employees, average_age_years, average_length_of_service_years, average_annual_salary, last_year_net_sales, net_sales, last_year_operating_income, operating_income, last_year_ordinary_income, ordinary_income, created_at, updated_at, capital_stock, net_assets, total_assets, equity_to_asset_ratio, rate_of_return_on_equity, price_earnings_ratio, net_cash_provided_by_used_in_operating_activities, net_cash_provided_by_used_in_investing_activities, net_cash_provided_by_used_in_financing_activities, cash_and_cash_equivalents, consolidated_number_of_employees, total_number_of_issued_shares, payout_ratio ` +
		`FROM public.documents ` +
		`WHERE security_code = $1`
	// run
	logf(sqlstr, securityCode)
	rows, err := db.QueryContext(ctx, sqlstr, securityCode)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Document
	for rows.Next() {
		d := Document{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&d.ID, &d.SecurityCode, &d.DocumentID, &d.EdinetCode, &d.FilerName, &d.PeriodStartedAt, &d.PeriodEndedAt, &d.DetailsSearchedAt, &d.CompanyName, &d.CompanyNameEn, &d.HeadOfficeLocation, &d.SubmittedAt, &d.FiscalYear, &d.Representative, &d.NumberOfEmployees, &d.AverageAgeYears, &d.AverageLengthOfServiceYears, &d.AverageAnnualSalary, &d.LastYearNetSales, &d.NetSales, &d.LastYearOperatingIncome, &d.OperatingIncome, &d.LastYearOrdinaryIncome, &d.OrdinaryIncome, &d.CreatedAt, &d.UpdatedAt, &d.CapitalStock, &d.NetAssets, &d.TotalAssets, &d.EquityToAssetRatio, &d.RateOfReturnOnEquity, &d.PriceEarningsRatio, &d.NetCashProvidedByUsedInOperatingActivities, &d.NetCashProvidedByUsedInInvestingActivities, &d.NetCashProvidedByUsedInFinancingActivities, &d.CashAndCashEquivalents, &d.ConsolidatedNumberOfEmployees, &d.TotalNumberOfIssuedShares, &d.PayoutRatio); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &d)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Security returns the Security associated with the [Document]'s (SecurityCode).
//
// Generated from foreign key 'fk_rails_8760eb48c7'.
func (d *Document) Security(ctx context.Context, db DB) (*Security, error) {
	return SecurityByCode(ctx, db, d.SecurityCode)
}
