package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// IndustryCategory represents a row from 'public.industry_categories'.
type IndustryCategory struct {
	ID   int64  `json:"id"`   // id
	Name string `json:"name"` // name
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [IndustryCategory] exists in the database.
func (ic *IndustryCategory) Exists() bool {
	return ic._exists
}

// Deleted returns true when the [IndustryCategory] has been marked for deletion
// from the database.
func (ic *IndustryCategory) Deleted() bool {
	return ic._deleted
}

// Insert inserts the [IndustryCategory] to the database.
func (ic *IndustryCategory) Insert(ctx context.Context, db DB) error {
	switch {
	case ic._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ic._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.industry_categories (` +
		`name` +
		`) VALUES (` +
		`$1` +
		`) RETURNING id`
	// run
	logf(sqlstr, ic.Name)
	if err := db.QueryRowContext(ctx, sqlstr, ic.Name).Scan(&ic.ID); err != nil {
		return logerror(err)
	}
	// set exists
	ic._exists = true
	return nil
}

// Update updates a [IndustryCategory] in the database.
func (ic *IndustryCategory) Update(ctx context.Context, db DB) error {
	switch {
	case !ic._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ic._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.industry_categories SET ` +
		`name = $1 ` +
		`WHERE id = $2`
	// run
	logf(sqlstr, ic.Name, ic.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ic.Name, ic.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [IndustryCategory] to the database.
func (ic *IndustryCategory) Save(ctx context.Context, db DB) error {
	if ic.Exists() {
		return ic.Update(ctx, db)
	}
	return ic.Insert(ctx, db)
}

// Upsert performs an upsert for [IndustryCategory].
func (ic *IndustryCategory) Upsert(ctx context.Context, db DB) error {
	switch {
	case ic._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.industry_categories (` +
		`id, name` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name `
	// run
	logf(sqlstr, ic.ID, ic.Name)
	if _, err := db.ExecContext(ctx, sqlstr, ic.ID, ic.Name); err != nil {
		return logerror(err)
	}
	// set exists
	ic._exists = true
	return nil
}

// Delete deletes the [IndustryCategory] from the database.
func (ic *IndustryCategory) Delete(ctx context.Context, db DB) error {
	switch {
	case !ic._exists: // doesn't exist
		return nil
	case ic._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.industry_categories ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, ic.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ic.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ic._deleted = true
	return nil
}

// IndustryCategoryByName retrieves a row from 'public.industry_categories' as a [IndustryCategory].
//
// Generated from index 'index_industry_categories_on_name'.
func IndustryCategoryByName(ctx context.Context, db DB, name string) (*IndustryCategory, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name ` +
		`FROM public.industry_categories ` +
		`WHERE name = $1`
	// run
	logf(sqlstr, name)
	ic := IndustryCategory{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, name).Scan(&ic.ID, &ic.Name); err != nil {
		return nil, logerror(err)
	}
	return &ic, nil
}

// IndustryCategoryByID retrieves a row from 'public.industry_categories' as a [IndustryCategory].
//
// Generated from index 'industry_categories_pkey'.
func IndustryCategoryByID(ctx context.Context, db DB, id int64) (*IndustryCategory, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name ` +
		`FROM public.industry_categories ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	ic := IndustryCategory{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&ic.ID, &ic.Name); err != nil {
		return nil, logerror(err)
	}
	return &ic, nil
}
