// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for ListCompaniesParamsSortType.
const (
	AverageAnnualSalary ListCompaniesParamsSortType = "average_annual_salary"
	NetSales            ListCompaniesParamsSortType = "net_sales"
	OrdinaryIncome      ListCompaniesParamsSortType = "ordinary_income"
)

// Company defines model for Company.
type Company struct {
	// AverageAgeYears 平均年齢
	AverageAgeYears *float64 `json:"average_age_years"`

	// AverageAnnualSalary 平均年収
	AverageAnnualSalary *int64 `json:"average_annual_salary"`

	// AverageLengthOfServiceYears 平均勤続年数
	AverageLengthOfServiceYears *float64 `json:"average_length_of_service_years"`

	// CapitalStock 資本金
	CapitalStock *int64 `json:"capital_stock"`

	// CashAndCashEquivalents 現金及び現金同等物
	CashAndCashEquivalents *int64 `json:"cash_and_cash_equivalents"`

	// CompanyName 会社名
	CompanyName string `json:"company_name"`

	// CompanyNameEn 会社名(英語)
	CompanyNameEn string `json:"company_name_en"`

	// ConsolidatedNumberOfEmployees 連結従業員数
	ConsolidatedNumberOfEmployees *int64 `json:"consolidated_number_of_employees"`

	// EquityToAssetRatio 自己資本比率
	EquityToAssetRatio *float64 `json:"equity_to_asset_ratio"`

	// HeadOfficeLocation 本店所在地
	HeadOfficeLocation string `json:"head_office_location"`

	// IndustryCode 業種コード
	IndustryCode int32 `json:"industry_code"`

	// IndustryId 業種ID
	IndustryId int32 `json:"industry_id"`

	// IndustryName 業種名
	IndustryName string `json:"industry_name"`

	// LastYearNetSales 売上高(前年)
	LastYearNetSales *int64 `json:"last_year_net_sales"`

	// LastYearOperatingIncome 営業利益(前年)
	LastYearOperatingIncome *int64 `json:"last_year_operating_income"`

	// LastYearOrdinaryIncome 経常利益(前年)
	LastYearOrdinaryIncome *int64 `json:"last_year_ordinary_income"`

	// MarketId 市場コード
	MarketId int64 `json:"market_id"`

	// MarketName 市場名
	MarketName string `json:"market_name"`

	// NetAssets 純資産
	NetAssets *int64 `json:"net_assets"`

	// NetCashProvidedByUsedInFinancingActivities 財務キャッシュフロー
	NetCashProvidedByUsedInFinancingActivities *int64 `json:"net_cash_provided_by_used_in_financing_activities"`

	// NetCashProvidedByUsedInInvestingActivities 投資キャッシュフロー
	NetCashProvidedByUsedInInvestingActivities *int64 `json:"net_cash_provided_by_used_in_investing_activities"`

	// NetCashProvidedByUsedInOperatingActivities 営業キャッシュフロー
	NetCashProvidedByUsedInOperatingActivities *int64 `json:"net_cash_provided_by_used_in_operating_activities"`

	// NetSales 売上高(当年)
	NetSales *int64 `json:"net_sales"`

	// NumberOfEmployees 従業員数
	NumberOfEmployees *int64 `json:"number_of_employees"`

	// OperatingIncome 営業利益(当年)
	OperatingIncome *int64 `json:"operating_income"`

	// OrdinaryIncome 経常利益(当年)
	OrdinaryIncome *int64 `json:"ordinary_income"`

	// PayoutRatio 配当性向
	PayoutRatio *float64 `json:"payout_ratio"`

	// PeriodEndedAt 事業年度の終了日
	PeriodEndedAt string `json:"period_ended_at"`

	// PeriodEndedAtMonth 事業年度の終了月
	PeriodEndedAtMonth int `json:"period_ended_at_month"`

	// PeriodEndedAtYear 事業年度の終了年
	PeriodEndedAtYear int `json:"period_ended_at_year"`

	// PeriodStartedAt 事業年度の開始日
	PeriodStartedAt string `json:"period_started_at"`

	// PriceEarningsRatio 株価収益率(PER)
	PriceEarningsRatio *float64 `json:"price_earnings_ratio"`

	// RateOfReturnOnEquity 自己資本利益率(ROE)
	RateOfReturnOnEquity *float64 `json:"rate_of_return_on_equity"`

	// Representative 代表者
	Representative string `json:"representative"`

	// SecurityCode 銘柄コード
	SecurityCode int `json:"security_code"`

	// SecurityId 証券ID
	SecurityId int64 `json:"security_id"`

	// SecurityName 銘柄名
	SecurityName string `json:"security_name"`

	// SubmittedAt 提出日
	SubmittedAt string `json:"submitted_at"`

	// TotalAssets 総資産
	TotalAssets *int64 `json:"total_assets"`

	// TotalNumberOfIssuedShares 発行済株式総数
	TotalNumberOfIssuedShares *int64 `json:"total_number_of_issued_shares"`
}

// EachCompany defines model for eachCompany.
type EachCompany struct {
	AverageAnnualSalary *int64 `json:"average_annual_salary"`

	// IndustryCode 業種コード
	IndustryCode int32  `json:"industry_code"`
	IndustryName string `json:"industry_name"`

	// MarketId 市場コード
	MarketId       int32  `json:"market_id"`
	MarketName     string `json:"market_name"`
	NetSales       *int64 `json:"net_sales"`
	OrdinaryIncome *int64 `json:"ordinary_income"`
	SecurityCode   int    `json:"security_code"`
	SecurityName   string `json:"security_name"`
	SecurityNameEn string `json:"security_name_en"`
}

// EachIndustryCategory defines model for eachIndustryCategory.
type EachIndustryCategory struct {
	Id         int64                           `json:"id"`
	Industries *[]EachIndustryCategoryIndustry `json:"industries"`
	Name       string                          `json:"name"`
}

// EachIndustryCategoryIndustry defines model for eachIndustryCategoryIndustry.
type EachIndustryCategoryIndustry struct {
	// Code 33業種コード
	Code int32 `json:"code"`

	// Count 業種に属する企業数
	Count int32  `json:"count"`
	Id    int64  `json:"id"`
	Name  string `json:"name"`
}

// EachMarket defines model for eachMarket.
type EachMarket struct {
	// Count 市場に属する企業数
	Count int    `json:"count"`
	Id    int64  `json:"id"`
	Name  string `json:"name"`
}

// Industry defines model for industry.
type Industry struct {
	Code int    `json:"code"`
	Id   int64  `json:"id"`
	Name string `json:"name"`
}

// Market defines model for market.
type Market struct {
	Id   int64  `json:"id"`
	Name string `json:"name"`
}

// Meta defines model for meta.
type Meta struct {
	// CurrentPage 現在のページ番号
	CurrentPage int `json:"current_page"`

	// LastPage 最後ののページ番号
	LastPage int `json:"last_page"`

	// LimitCount 1ページあたりのアイテム数
	LimitCount int `json:"limit_count"`

	// NextPage 次のページ番号
	NextPage *int `json:"next_page"`

	// OffsetCount アイテムの取得開始位置
	OffsetCount int `json:"offset_count"`

	// PrevPage 前のページ番号
	PrevPage *int `json:"prev_page"`

	// SortType ソートタイプ
	SortType string `json:"sort_type"`

	// TotalCount 総アイテム数
	TotalCount int `json:"total_count"`
}

// ResponseCompanies defines model for responseCompanies.
type ResponseCompanies struct {
	Companies []EachCompany `json:"companies"`
	Meta      Meta          `json:"meta"`
}

// ResponseCompany defines model for responseCompany.
type ResponseCompany struct {
	Company Company `json:"company"`
}

// ResponseIndustries defines model for responseIndustries.
type ResponseIndustries struct {
	IndustryCategories []EachIndustryCategory `json:"industry_categories"`
}

// ResponseIndustry defines model for responseIndustry.
type ResponseIndustry struct {
	Industry Industry `json:"industry"`
}

// ResponseIndustryIDs defines model for responseIndustryIDs.
type ResponseIndustryIDs struct {
	IndustryIds []int64 `json:"industry_ids"`
}

// ResponseMarket defines model for responseMarket.
type ResponseMarket struct {
	Market Market `json:"market"`
}

// ResponseMarketIDs defines model for responseMarketIDs.
type ResponseMarketIDs struct {
	MarketIds []int64 `json:"market_ids"`
}

// ResponseMarkets defines model for responseMarkets.
type ResponseMarkets struct {
	Markets []EachMarket `json:"markets"`
}

// ResponseSecurityCodes defines model for responseSecurityCodes.
type ResponseSecurityCodes struct {
	SecurityCodes []int64 `json:"security_codes"`
}

// ListCompaniesParams defines parameters for ListCompanies.
type ListCompaniesParams struct {
	Page     *int                        `form:"page,omitempty" json:"page,omitempty"`
	SortType ListCompaniesParamsSortType `form:"sort_type" json:"sort_type"`

	// Q query for company_name or security_id
	Q          *string `form:"q,omitempty" json:"q,omitempty"`
	IndustryId *int    `form:"industry_id,omitempty" json:"industry_id,omitempty"`
	MarketId   *int    `form:"market_id,omitempty" json:"market_id,omitempty"`
}

// ListCompaniesParamsSortType defines parameters for ListCompanies.
type ListCompaniesParamsSortType string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get and Search Companies
	// (GET /api/v1/companies)
	ListCompanies(w http.ResponseWriter, r *http.Request, params ListCompaniesParams)
	// Get Company
	// (GET /api/v1/companies/{code})
	GetCompany(w http.ResponseWriter, r *http.Request, code int)
	// Get Industries
	// (GET /api/v1/industries)
	ListIndustries(w http.ResponseWriter, r *http.Request)
	// Get Industry
	// (GET /api/v1/industries/{id})
	GetIndustry(w http.ResponseWriter, r *http.Request, id int)
	// Get IndustryIds
	// (GET /api/v1/industry_ids)
	ListIndustryIds(w http.ResponseWriter, r *http.Request)
	// Get MarketIds
	// (GET /api/v1/market_ids)
	ListMarketIds(w http.ResponseWriter, r *http.Request)
	// Get Markets
	// (GET /api/v1/markets)
	ListMarkets(w http.ResponseWriter, r *http.Request)
	// Get Market
	// (GET /api/v1/markets/{id})
	GetMarket(w http.ResponseWriter, r *http.Request, id int)
	// Get CompanyIds
	// (GET /api/v1/security_codes)
	ListSecurityCodes(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListCompanies operation middleware
func (siw *ServerInterfaceWrapper) ListCompanies(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCompaniesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "sort_type" -------------

	if paramValue := r.URL.Query().Get("sort_type"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "sort_type"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "sort_type", r.URL.Query(), &params.SortType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort_type", Err: err})
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	// ------------- Optional query parameter "industry_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "industry_id", r.URL.Query(), &params.IndustryId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "industry_id", Err: err})
		return
	}

	// ------------- Optional query parameter "market_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "market_id", r.URL.Query(), &params.MarketId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "market_id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCompanies(w, r, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCompany operation middleware
func (siw *ServerInterfaceWrapper) GetCompany(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code int

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCompany(w, r, code)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListIndustries operation middleware
func (siw *ServerInterfaceWrapper) ListIndustries(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListIndustries(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetIndustry operation middleware
func (siw *ServerInterfaceWrapper) GetIndustry(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIndustry(w, r, id)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListIndustryIds operation middleware
func (siw *ServerInterfaceWrapper) ListIndustryIds(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListIndustryIds(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMarketIds operation middleware
func (siw *ServerInterfaceWrapper) ListMarketIds(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMarketIds(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMarkets operation middleware
func (siw *ServerInterfaceWrapper) ListMarkets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMarkets(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMarket operation middleware
func (siw *ServerInterfaceWrapper) GetMarket(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMarket(w, r, id)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSecurityCodes operation middleware
func (siw *ServerInterfaceWrapper) ListSecurityCodes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSecurityCodes(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/companies", wrapper.ListCompanies)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/companies/{code}", wrapper.GetCompany)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/industries", wrapper.ListIndustries)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/industries/{id}", wrapper.GetIndustry)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/industry_ids", wrapper.ListIndustryIds)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/market_ids", wrapper.ListMarketIds)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/markets", wrapper.ListMarkets)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/markets/{id}", wrapper.GetMarket)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/security_codes", wrapper.ListSecurityCodes)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
