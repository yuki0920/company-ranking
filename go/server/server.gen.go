// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for FetchCompaniesParamsSortType.
const (
	AverageAnnualSalary FetchCompaniesParamsSortType = "average_annual_salary"
	NetSales            FetchCompaniesParamsSortType = "net_sales"
	OrdinaryIncome      FetchCompaniesParamsSortType = "ordinary_income"
)

// Company defines model for Company.
type Company struct {
	// AverageAgeYears 平均年齢
	AverageAgeYears *float64 `json:"average_age_years"`

	// AverageAnnualSalary 平均年収
	AverageAnnualSalary *int64 `json:"average_annual_salary"`

	// AverageLengthOfServiceYears 平均勤続年数
	AverageLengthOfServiceYears *float64 `json:"average_length_of_service_years"`

	// CapitalStock 資本金
	CapitalStock *int64 `json:"capital_stock"`

	// CashAndCashEquivalents 現金及び現金同等物
	CashAndCashEquivalents *int64 `json:"cash_and_cash_equivalents"`

	// CompanyName 会社名
	CompanyName string `json:"company_name"`

	// CompanyNameEn 会社名(英語)
	CompanyNameEn string `json:"company_name_en"`

	// ConsolidatedNumberOfEmployees 連結従業員数
	ConsolidatedNumberOfEmployees *int64 `json:"consolidated_number_of_employees"`

	// EquityToAssetRatio 自己資本比率
	EquityToAssetRatio *float64 `json:"equity_to_asset_ratio"`

	// HeadOfficeLocation 本店所在地
	HeadOfficeLocation string `json:"head_office_location"`

	// IndustryCode 業種コード
	IndustryCode int32 `json:"industry_code"`

	// IndustryId 業種ID
	IndustryId int32 `json:"industry_id"`

	// IndustryName 業種名
	IndustryName string `json:"industry_name"`

	// LastYearNetSales 売上高(前年)
	LastYearNetSales *int64 `json:"last_year_net_sales"`

	// LastYearOperatingIncome 営業利益(前年)
	LastYearOperatingIncome *int64 `json:"last_year_operating_income"`

	// LastYearOrdinaryIncome 経常利益(前年)
	LastYearOrdinaryIncome *int64 `json:"last_year_ordinary_income"`

	// MarketId 市場コード
	MarketId int64 `json:"market_id"`

	// MarketName 市場名
	MarketName string `json:"market_name"`

	// NetAssets 純資産
	NetAssets *int64 `json:"net_assets"`

	// NetCashProvidedByUsedInFinancingActivities 財務キャッシュフロー
	NetCashProvidedByUsedInFinancingActivities *int64 `json:"net_cash_provided_by_used_in_financing_activities"`

	// NetCashProvidedByUsedInInvestingActivities 投資キャッシュフロー
	NetCashProvidedByUsedInInvestingActivities *int64 `json:"net_cash_provided_by_used_in_investing_activities"`

	// NetCashProvidedByUsedInOperatingActivities 営業キャッシュフロー
	NetCashProvidedByUsedInOperatingActivities *int64 `json:"net_cash_provided_by_used_in_operating_activities"`

	// NetSales 売上高(当年)
	NetSales *int64 `json:"net_sales"`

	// NumberOfEmployees 従業員数
	NumberOfEmployees *int64 `json:"number_of_employees"`

	// OperatingIncome 営業利益(当年)
	OperatingIncome *int64 `json:"operating_income"`

	// OrdinaryIncome 経常利益(当年)
	OrdinaryIncome *int64 `json:"ordinary_income"`

	// PayoutRatio 配当性向
	PayoutRatio *float64 `json:"payout_ratio"`

	// PeriodEndedAt 事業年度の終了日
	PeriodEndedAt string `json:"period_ended_at"`

	// PeriodEndedAtMonth 事業年度の終了月
	PeriodEndedAtMonth int `json:"period_ended_at_month"`

	// PeriodEndedAtYear 事業年度の終了年
	PeriodEndedAtYear int `json:"period_ended_at_year"`

	// PeriodStartedAt 事業年度の開始日
	PeriodStartedAt string `json:"period_started_at"`

	// PriceEarningsRatio 株価収益率(PER)
	PriceEarningsRatio *float64 `json:"price_earnings_ratio"`

	// RateOfReturnOnEquity 自己資本利益率(ROE)
	RateOfReturnOnEquity *float64 `json:"rate_of_return_on_equity"`

	// Representative 代表者
	Representative string `json:"representative"`

	// SecurityCode 銘柄コード
	SecurityCode int `json:"security_code"`

	// SecurityId 証券ID
	SecurityId int64 `json:"security_id"`

	// SecurityName 銘柄名
	SecurityName string `json:"security_name"`

	// SubmittedAt 提出日
	SubmittedAt string `json:"submitted_at"`

	// TotalAssets 総資産
	TotalAssets *int64 `json:"total_assets"`

	// TotalNumberOfIssuedShares 発行済株式総数
	TotalNumberOfIssuedShares *int64 `json:"total_number_of_issued_shares"`
}

// EachCompany defines model for eachCompany.
type EachCompany struct {
	AverageAnnualSalary *int64 `json:"average_annual_salary"`

	// IndustryCode 業種コード
	IndustryCode int32  `json:"industry_code"`
	IndustryName string `json:"industry_name"`

	// MarketId 市場コード
	MarketId       int32  `json:"market_id"`
	MarketName     string `json:"market_name"`
	NetSales       *int64 `json:"net_sales"`
	OrdinaryIncome *int64 `json:"ordinary_income"`
	SecurityCode   int    `json:"security_code"`
	SecurityName   string `json:"security_name"`
	SecurityNameEn string `json:"security_name_en"`
}

// EachIndustryCategory defines model for eachIndustryCategory.
type EachIndustryCategory struct {
	Id         int64                           `json:"id"`
	Industries *[]EachIndustryCategoryIndustry `json:"industries"`
	Name       string                          `json:"name"`
}

// EachIndustryCategoryIndustry defines model for eachIndustryCategoryIndustry.
type EachIndustryCategoryIndustry struct {
	// Code 33業種コード
	Code int32 `json:"code"`

	// Count 業種に属する企業数
	Count int32  `json:"count"`
	Id    int64  `json:"id"`
	Name  string `json:"name"`
}

// EachMarket defines model for eachMarket.
type EachMarket struct {
	// Count 市場に属する企業数
	Count int    `json:"count"`
	Id    int64  `json:"id"`
	Name  string `json:"name"`
}

// Industry defines model for industry.
type Industry struct {
	Code int    `json:"code"`
	Id   int64  `json:"id"`
	Name string `json:"name"`
}

// Market defines model for market.
type Market struct {
	Id   int64  `json:"id"`
	Name string `json:"name"`
}

// Meta defines model for meta.
type Meta struct {
	// Count 総アイテム数
	Count int `json:"count"`

	// From アイテムの取得開始位置
	From int `json:"from"`

	// Items 1ページあたりのアイテム数
	Items int `json:"items"`

	// Next 次のページ番号
	Next *int `json:"next"`

	// Page 現在のページ番号
	Page int `json:"page"`

	// Pages 最後ののページ番号
	Pages int `json:"pages"`

	// Prev 前のページ番号
	Prev *int `json:"prev"`
}

// ResponseCompanies defines model for responseCompanies.
type ResponseCompanies struct {
	Companies []EachCompany `json:"companies"`
	Meta      Meta          `json:"meta"`
}

// ResponseCompany defines model for responseCompany.
type ResponseCompany struct {
	Company Company `json:"company"`
}

// ResponseIndustries defines model for responseIndustries.
type ResponseIndustries struct {
	IndustryCategories []EachIndustryCategory `json:"industry_categories"`
}

// ResponseIndustry defines model for responseIndustry.
type ResponseIndustry struct {
	Industry Industry `json:"industry"`
}

// ResponseIndustryIDs defines model for responseIndustryIDs.
type ResponseIndustryIDs struct {
	IndustryIds []int64 `json:"industry_ids"`
}

// ResponseMarket defines model for responseMarket.
type ResponseMarket struct {
	Market Market `json:"market"`
}

// ResponseMarketIDs defines model for responseMarketIDs.
type ResponseMarketIDs struct {
	MarketIds []int64 `json:"market_ids"`
}

// ResponseMarkets defines model for responseMarkets.
type ResponseMarkets struct {
	Markets []EachMarket `json:"markets"`
}

// FetchCompaniesParams defines parameters for FetchCompanies.
type FetchCompaniesParams struct {
	Page     *int                         `form:"page,omitempty" json:"page,omitempty"`
	SortType FetchCompaniesParamsSortType `form:"sort_type" json:"sort_type"`

	// Q query for company_name or security_id
	Q          *string `form:"q,omitempty" json:"q,omitempty"`
	IndustryId *int    `form:"industry_id,omitempty" json:"industry_id,omitempty"`
	MarketId   *int    `form:"market_id,omitempty" json:"market_id,omitempty"`
}

// FetchCompaniesParamsSortType defines parameters for FetchCompanies.
type FetchCompaniesParamsSortType string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get and Search Companies
	// (GET /api/v1/companies)
	FetchCompanies(w http.ResponseWriter, r *http.Request, params FetchCompaniesParams)
	// Get Company
	// (GET /api/v1/companies/{code})
	FetchCompany(w http.ResponseWriter, r *http.Request, code int)
	// Get CompanyIds
	// (GET /api/v1/company_ids)
	FetchCompanyIds(w http.ResponseWriter, r *http.Request)
	// Get Industries
	// (GET /api/v1/industries)
	FetchIndustries(w http.ResponseWriter, r *http.Request)
	// Get Industry
	// (GET /api/v1/industries/{id})
	FetchIndustry(w http.ResponseWriter, r *http.Request, id int)
	// Get IndustryIds
	// (GET /api/v1/industry_ids)
	FetchIndustryIds(w http.ResponseWriter, r *http.Request)
	// Get MarketIds
	// (GET /api/v1/market_ids)
	FetchMarketIds(w http.ResponseWriter, r *http.Request)
	// Get Markets
	// (GET /api/v1/markets)
	FetchMarkets(w http.ResponseWriter, r *http.Request)
	// Get Market
	// (GET /api/v1/markets/{id})
	FetchMarket(w http.ResponseWriter, r *http.Request, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// FetchCompanies operation middleware
func (siw *ServerInterfaceWrapper) FetchCompanies(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FetchCompaniesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "sort_type" -------------

	if paramValue := r.URL.Query().Get("sort_type"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "sort_type"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "sort_type", r.URL.Query(), &params.SortType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort_type", Err: err})
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	// ------------- Optional query parameter "industry_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "industry_id", r.URL.Query(), &params.IndustryId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "industry_id", Err: err})
		return
	}

	// ------------- Optional query parameter "market_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "market_id", r.URL.Query(), &params.MarketId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "market_id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FetchCompanies(w, r, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FetchCompany operation middleware
func (siw *ServerInterfaceWrapper) FetchCompany(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code int

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FetchCompany(w, r, code)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FetchCompanyIds operation middleware
func (siw *ServerInterfaceWrapper) FetchCompanyIds(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FetchCompanyIds(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FetchIndustries operation middleware
func (siw *ServerInterfaceWrapper) FetchIndustries(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FetchIndustries(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FetchIndustry operation middleware
func (siw *ServerInterfaceWrapper) FetchIndustry(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FetchIndustry(w, r, id)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FetchIndustryIds operation middleware
func (siw *ServerInterfaceWrapper) FetchIndustryIds(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FetchIndustryIds(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FetchMarketIds operation middleware
func (siw *ServerInterfaceWrapper) FetchMarketIds(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FetchMarketIds(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FetchMarkets operation middleware
func (siw *ServerInterfaceWrapper) FetchMarkets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FetchMarkets(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FetchMarket operation middleware
func (siw *ServerInterfaceWrapper) FetchMarket(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FetchMarket(w, r, id)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/companies", wrapper.FetchCompanies)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/companies/{code}", wrapper.FetchCompany)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/company_ids", wrapper.FetchCompanyIds)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/industries", wrapper.FetchIndustries)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/industries/{id}", wrapper.FetchIndustry)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/industry_ids", wrapper.FetchIndustryIds)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/market_ids", wrapper.FetchMarketIds)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/markets", wrapper.FetchMarkets)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/markets/{id}", wrapper.FetchMarket)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
