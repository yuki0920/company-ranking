//go:build go1.22

// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ListCompaniesParamsSortType.
const (
	AverageAnnualSalary ListCompaniesParamsSortType = "average_annual_salary"
	NetSales            ListCompaniesParamsSortType = "net_sales"
	OrdinaryIncome      ListCompaniesParamsSortType = "ordinary_income"
)

// Company defines model for Company.
type Company struct {
	// AverageAgeYears 平均年齢
	AverageAgeYears *float64 `json:"average_age_years"`

	// AverageAnnualSalary 平均年収
	AverageAnnualSalary *int64 `json:"average_annual_salary"`

	// AverageLengthOfServiceYears 平均勤続年数
	AverageLengthOfServiceYears *float64 `json:"average_length_of_service_years"`

	// CapitalStock 資本金
	CapitalStock *int64 `json:"capital_stock"`

	// CashAndCashEquivalents 現金及び現金同等物
	CashAndCashEquivalents *int64 `json:"cash_and_cash_equivalents"`

	// CompanyName 会社名
	CompanyName string `json:"company_name"`

	// CompanyNameEn 会社名(英語)
	CompanyNameEn string `json:"company_name_en"`

	// ConsolidatedNumberOfEmployees 連結従業員数
	ConsolidatedNumberOfEmployees *int64 `json:"consolidated_number_of_employees"`

	// EquityToAssetRatio 自己資本比率
	EquityToAssetRatio *float64 `json:"equity_to_asset_ratio"`

	// HeadOfficeLocation 本店所在地
	HeadOfficeLocation string `json:"head_office_location"`

	// IndustryCode 業種コード
	IndustryCode int32 `json:"industry_code"`

	// IndustryId 業種ID
	IndustryId int32 `json:"industry_id"`

	// IndustryName 業種名
	IndustryName string `json:"industry_name"`

	// LastYearNetSales 売上高(前年)
	LastYearNetSales *int64 `json:"last_year_net_sales"`

	// LastYearOperatingIncome 営業利益(前年)
	LastYearOperatingIncome *int64 `json:"last_year_operating_income"`

	// LastYearOrdinaryIncome 経常利益(前年)
	LastYearOrdinaryIncome *int64 `json:"last_year_ordinary_income"`

	// MarketId 市場コード
	MarketId int64 `json:"market_id"`

	// MarketName 市場名
	MarketName string `json:"market_name"`

	// NetAssets 純資産
	NetAssets *int64 `json:"net_assets"`

	// NetCashProvidedByUsedInFinancingActivities 財務キャッシュフロー
	NetCashProvidedByUsedInFinancingActivities *int64 `json:"net_cash_provided_by_used_in_financing_activities"`

	// NetCashProvidedByUsedInInvestingActivities 投資キャッシュフロー
	NetCashProvidedByUsedInInvestingActivities *int64 `json:"net_cash_provided_by_used_in_investing_activities"`

	// NetCashProvidedByUsedInOperatingActivities 営業キャッシュフロー
	NetCashProvidedByUsedInOperatingActivities *int64 `json:"net_cash_provided_by_used_in_operating_activities"`

	// NetSales 売上高(当年)
	NetSales *int64 `json:"net_sales"`

	// NumberOfEmployees 従業員数
	NumberOfEmployees *int64 `json:"number_of_employees"`

	// OperatingIncome 営業利益(当年)
	OperatingIncome *int64 `json:"operating_income"`

	// OrdinaryIncome 経常利益(当年)
	OrdinaryIncome *int64 `json:"ordinary_income"`

	// PayoutRatio 配当性向
	PayoutRatio *float64 `json:"payout_ratio"`

	// PeriodEndedAt 事業年度の終了日
	PeriodEndedAt string `json:"period_ended_at"`

	// PeriodEndedAtMonth 事業年度の終了月
	PeriodEndedAtMonth int `json:"period_ended_at_month"`

	// PeriodEndedAtYear 事業年度の終了年
	PeriodEndedAtYear int `json:"period_ended_at_year"`

	// PeriodStartedAt 事業年度の開始日
	PeriodStartedAt string `json:"period_started_at"`

	// PriceEarningsRatio 株価収益率(PER)
	PriceEarningsRatio *float64 `json:"price_earnings_ratio"`

	// RateOfReturnOnEquity 自己資本利益率(ROE)
	RateOfReturnOnEquity *float64 `json:"rate_of_return_on_equity"`

	// Representative 代表者
	Representative string `json:"representative"`

	// SecurityCode 銘柄コード
	SecurityCode int `json:"security_code"`

	// SecurityId 証券ID
	SecurityId int64 `json:"security_id"`

	// SecurityName 銘柄名
	SecurityName string `json:"security_name"`

	// SubmittedAt 提出日
	SubmittedAt string `json:"submitted_at"`

	// TotalAssets 総資産
	TotalAssets *int64 `json:"total_assets"`

	// TotalNumberOfIssuedShares 発行済株式総数
	TotalNumberOfIssuedShares *int64 `json:"total_number_of_issued_shares"`
}

// EachCompany defines model for eachCompany.
type EachCompany struct {
	AverageAnnualSalary *int64 `json:"average_annual_salary"`

	// IndustryCode 業種コード
	IndustryCode int32  `json:"industry_code"`
	IndustryName string `json:"industry_name"`

	// MarketId 市場コード
	MarketId       int32  `json:"market_id"`
	MarketName     string `json:"market_name"`
	NetSales       *int64 `json:"net_sales"`
	OrdinaryIncome *int64 `json:"ordinary_income"`
	SecurityCode   int    `json:"security_code"`
	SecurityName   string `json:"security_name"`
	SecurityNameEn string `json:"security_name_en"`
}

// EachIndustry defines model for eachIndustry.
type EachIndustry struct {
	// Code 33業種コード
	Code int32 `json:"code"`

	// Count 業種に属する企業数
	Count int32  `json:"count"`
	Id    int64  `json:"id"`
	Name  string `json:"name"`
}

// EachMarket defines model for eachMarket.
type EachMarket struct {
	// Count 市場に属する企業数
	Count int    `json:"count"`
	Id    int64  `json:"id"`
	Name  string `json:"name"`
}

// Industry defines model for industry.
type Industry struct {
	Code int    `json:"code"`
	Id   int64  `json:"id"`
	Name string `json:"name"`
}

// Market defines model for market.
type Market struct {
	Id   int64  `json:"id"`
	Name string `json:"name"`
}

// Meta defines model for meta.
type Meta struct {
	// CurrentPage 現在のページ番号
	CurrentPage int `json:"current_page"`

	// LastPage 最後ののページ番号
	LastPage int `json:"last_page"`

	// LimitCount 1ページあたりのアイテム数
	LimitCount int `json:"limit_count"`

	// NextPage 次のページ番号
	NextPage *int `json:"next_page"`

	// OffsetCount アイテムの取得開始位置
	OffsetCount int `json:"offset_count"`

	// PrevPage 前のページ番号
	PrevPage *int `json:"prev_page"`

	// SortType ソートタイプ
	SortType string `json:"sort_type"`

	// TotalCount 総アイテム数
	TotalCount int `json:"total_count"`
}

// ResponseCompanies defines model for responseCompanies.
type ResponseCompanies struct {
	Companies []EachCompany `json:"companies"`
	Meta      Meta          `json:"meta"`
}

// ResponseCompany defines model for responseCompany.
type ResponseCompany struct {
	Company Company `json:"company"`
}

// ResponseIndustries defines model for responseIndustries.
type ResponseIndustries struct {
	Industries []EachIndustry `json:"industries"`
}

// ResponseIndustry defines model for responseIndustry.
type ResponseIndustry struct {
	Industry Industry `json:"industry"`
}

// ResponseIndustryIDs defines model for responseIndustryIDs.
type ResponseIndustryIDs struct {
	IndustryIds []int64 `json:"industry_ids"`
}

// ResponseMarket defines model for responseMarket.
type ResponseMarket struct {
	Market Market `json:"market"`
}

// ResponseMarketIDs defines model for responseMarketIDs.
type ResponseMarketIDs struct {
	MarketIds []int64 `json:"market_ids"`
}

// ResponseMarkets defines model for responseMarkets.
type ResponseMarkets struct {
	Markets []EachMarket `json:"markets"`
}

// ResponseSecurityCodes defines model for responseSecurityCodes.
type ResponseSecurityCodes struct {
	SecurityCodes []int64 `json:"security_codes"`
}

// ListCompaniesParams defines parameters for ListCompanies.
type ListCompaniesParams struct {
	Page     *int                        `form:"page,omitempty" json:"page,omitempty"`
	SortType ListCompaniesParamsSortType `form:"sort_type" json:"sort_type"`

	// Q query for company_name or security_id
	Q          *string `form:"q,omitempty" json:"q,omitempty"`
	IndustryId *int    `form:"industry_id,omitempty" json:"industry_id,omitempty"`
	MarketId   *int    `form:"market_id,omitempty" json:"market_id,omitempty"`
}

// ListCompaniesParamsSortType defines parameters for ListCompanies.
type ListCompaniesParamsSortType string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get and Search Companies
	// (GET /api/v1/companies)
	ListCompanies(w http.ResponseWriter, r *http.Request, params ListCompaniesParams)
	// Get Company
	// (GET /api/v1/companies/{code})
	GetCompany(w http.ResponseWriter, r *http.Request, code int)
	// Get Industries
	// (GET /api/v1/industries)
	ListIndustries(w http.ResponseWriter, r *http.Request)
	// Get Industry
	// (GET /api/v1/industries/{id})
	GetIndustry(w http.ResponseWriter, r *http.Request, id int)
	// Get IndustryIds
	// (GET /api/v1/industry_ids)
	ListIndustryIds(w http.ResponseWriter, r *http.Request)
	// Get MarketIds
	// (GET /api/v1/market_ids)
	ListMarketIds(w http.ResponseWriter, r *http.Request)
	// Get Markets
	// (GET /api/v1/markets)
	ListMarkets(w http.ResponseWriter, r *http.Request)
	// Get Market
	// (GET /api/v1/markets/{id})
	GetMarket(w http.ResponseWriter, r *http.Request, id int)
	// Get CompanyIds
	// (GET /api/v1/security_codes)
	ListSecurityCodes(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListCompanies operation middleware
func (siw *ServerInterfaceWrapper) ListCompanies(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCompaniesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "sort_type" -------------

	if paramValue := r.URL.Query().Get("sort_type"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "sort_type"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "sort_type", r.URL.Query(), &params.SortType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort_type", Err: err})
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	// ------------- Optional query parameter "industry_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "industry_id", r.URL.Query(), &params.IndustryId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "industry_id", Err: err})
		return
	}

	// ------------- Optional query parameter "market_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "market_id", r.URL.Query(), &params.MarketId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "market_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCompanies(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCompany operation middleware
func (siw *ServerInterfaceWrapper) GetCompany(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code int

	err = runtime.BindStyledParameterWithOptions("simple", "code", r.PathValue("code"), &code, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCompany(w, r, code)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListIndustries operation middleware
func (siw *ServerInterfaceWrapper) ListIndustries(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListIndustries(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetIndustry operation middleware
func (siw *ServerInterfaceWrapper) GetIndustry(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIndustry(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListIndustryIds operation middleware
func (siw *ServerInterfaceWrapper) ListIndustryIds(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListIndustryIds(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMarketIds operation middleware
func (siw *ServerInterfaceWrapper) ListMarketIds(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMarketIds(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMarkets operation middleware
func (siw *ServerInterfaceWrapper) ListMarkets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMarkets(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMarket operation middleware
func (siw *ServerInterfaceWrapper) GetMarket(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMarket(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSecurityCodes operation middleware
func (siw *ServerInterfaceWrapper) ListSecurityCodes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSecurityCodes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/api/v1/companies", wrapper.ListCompanies)
	m.HandleFunc("GET "+options.BaseURL+"/api/v1/companies/{code}", wrapper.GetCompany)
	m.HandleFunc("GET "+options.BaseURL+"/api/v1/industries", wrapper.ListIndustries)
	m.HandleFunc("GET "+options.BaseURL+"/api/v1/industries/{id}", wrapper.GetIndustry)
	m.HandleFunc("GET "+options.BaseURL+"/api/v1/industry_ids", wrapper.ListIndustryIds)
	m.HandleFunc("GET "+options.BaseURL+"/api/v1/market_ids", wrapper.ListMarketIds)
	m.HandleFunc("GET "+options.BaseURL+"/api/v1/markets", wrapper.ListMarkets)
	m.HandleFunc("GET "+options.BaseURL+"/api/v1/markets/{id}", wrapper.GetMarket)
	m.HandleFunc("GET "+options.BaseURL+"/api/v1/security_codes", wrapper.ListSecurityCodes)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/DsAAP//rbKQdR4tAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
