/* tslint:disable */
/* eslint-disable */
/**
 * Company Search API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime"
/**
 *
 * @export
 * @interface Meta
 */
export interface Meta {
  /**
   * アイテムの取得開始位置
   * @type {number}
   * @memberof Meta
   */
  from: number
  /**
   * 総アイテム数
   * @type {number}
   * @memberof Meta
   */
  count: number
  /**
   * 1ページあたりのアイテム数
   * @type {number}
   * @memberof Meta
   */
  items: number
  /**
   * 現在のページ番号
   * @type {number}
   * @memberof Meta
   */
  page: number
  /**
   * 最後ののページ番号
   * @type {number}
   * @memberof Meta
   */
  pages: number
  /**
   * 前のページ番号
   * @type {number}
   * @memberof Meta
   */
  prev: number | null
  /**
   * 次のページ番号
   * @type {number}
   * @memberof Meta
   */
  next: number | null
}

/**
 * Check if a given object implements the Meta interface.
 */
export function instanceOfMeta(value: object): boolean {
  let isInstance = true
  isInstance = isInstance && "from" in value
  isInstance = isInstance && "count" in value
  isInstance = isInstance && "items" in value
  isInstance = isInstance && "page" in value
  isInstance = isInstance && "pages" in value
  isInstance = isInstance && "prev" in value
  isInstance = isInstance && "next" in value

  return isInstance
}

export function MetaFromJSON(json: any): Meta {
  return MetaFromJSONTyped(json, false)
}

export function MetaFromJSONTyped(json: any, ignoreDiscriminator: boolean): Meta {
  if (json === undefined || json === null) {
    return json
  }
  return {
    from: json["from"],
    count: json["count"],
    items: json["items"],
    page: json["page"],
    pages: json["pages"],
    prev: json["prev"],
    next: json["next"],
  }
}

export function MetaToJSON(value?: Meta | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    from: value.from,
    count: value.count,
    items: value.items,
    page: value.page,
    pages: value.pages,
    prev: value.prev,
    next: value.next,
  }
}
