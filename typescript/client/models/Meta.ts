/* tslint:disable */
/* eslint-disable */
/**
 * Company Search API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Meta
 */
export interface Meta {
    /**
     * アイテムの取得開始位置
     * @type {number}
     * @memberof Meta
     */
    offsetCount: number;
    /**
     * 総アイテム数
     * @type {number}
     * @memberof Meta
     */
    totalCount: number;
    /**
     * 1ページあたりのアイテム数
     * @type {number}
     * @memberof Meta
     */
    limitCount: number;
    /**
     * 現在のページ番号
     * @type {number}
     * @memberof Meta
     */
    currentPage: number;
    /**
     * 最後ののページ番号
     * @type {number}
     * @memberof Meta
     */
    lastPage: number;
    /**
     * 前のページ番号
     * @type {number}
     * @memberof Meta
     */
    prevPage: number | null;
    /**
     * 次のページ番号
     * @type {number}
     * @memberof Meta
     */
    nextPage: number | null;
    /**
     * ソートタイプ
     * @type {string}
     * @memberof Meta
     */
    sortType: string;
}

/**
 * Check if a given object implements the Meta interface.
 */
export function instanceOfMeta(value: object): value is Meta {
    if (!('offsetCount' in value) || value['offsetCount'] === undefined) return false;
    if (!('totalCount' in value) || value['totalCount'] === undefined) return false;
    if (!('limitCount' in value) || value['limitCount'] === undefined) return false;
    if (!('currentPage' in value) || value['currentPage'] === undefined) return false;
    if (!('lastPage' in value) || value['lastPage'] === undefined) return false;
    if (!('prevPage' in value) || value['prevPage'] === undefined) return false;
    if (!('nextPage' in value) || value['nextPage'] === undefined) return false;
    if (!('sortType' in value) || value['sortType'] === undefined) return false;
    return true;
}

export function MetaFromJSON(json: any): Meta {
    return MetaFromJSONTyped(json, false);
}

export function MetaFromJSONTyped(json: any, ignoreDiscriminator: boolean): Meta {
    if (json == null) {
        return json;
    }
    return {
        
        'offsetCount': json['offset_count'],
        'totalCount': json['total_count'],
        'limitCount': json['limit_count'],
        'currentPage': json['current_page'],
        'lastPage': json['last_page'],
        'prevPage': json['prev_page'],
        'nextPage': json['next_page'],
        'sortType': json['sort_type'],
    };
}

export function MetaToJSON(value?: Meta | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'offset_count': value['offsetCount'],
        'total_count': value['totalCount'],
        'limit_count': value['limitCount'],
        'current_page': value['currentPage'],
        'last_page': value['lastPage'],
        'prev_page': value['prevPage'],
        'next_page': value['nextPage'],
        'sort_type': value['sortType'],
    };
}

