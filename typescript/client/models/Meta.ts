/* tslint:disable */
/* eslint-disable */
/**
 * Company Search API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Meta
 */
export interface Meta {
    /**
     * アイテムの取得開始位置
     * @type {number}
     * @memberof Meta
     */
    offsetCount: number;
    /**
     * 総アイテム数
     * @type {number}
     * @memberof Meta
     */
    totalCount: number;
    /**
     * 1ページあたりのアイテム数
     * @type {number}
     * @memberof Meta
     */
    limitCount: number;
    /**
     * 現在のページ番号
     * @type {number}
     * @memberof Meta
     */
    currentPage: number;
    /**
     * 最後ののページ番号
     * @type {number}
     * @memberof Meta
     */
    lastPage: number;
    /**
     * 前のページ番号
     * @type {number}
     * @memberof Meta
     */
    prevPage: number | null;
    /**
     * 次のページ番号
     * @type {number}
     * @memberof Meta
     */
    nextPage: number | null;
    /**
     * ソートタイプ
     * @type {string}
     * @memberof Meta
     */
    sortType: string;
}

/**
 * Check if a given object implements the Meta interface.
 */
export function instanceOfMeta(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "offsetCount" in value;
    isInstance = isInstance && "totalCount" in value;
    isInstance = isInstance && "limitCount" in value;
    isInstance = isInstance && "currentPage" in value;
    isInstance = isInstance && "lastPage" in value;
    isInstance = isInstance && "prevPage" in value;
    isInstance = isInstance && "nextPage" in value;
    isInstance = isInstance && "sortType" in value;

    return isInstance;
}

export function MetaFromJSON(json: any): Meta {
    return MetaFromJSONTyped(json, false);
}

export function MetaFromJSONTyped(json: any, ignoreDiscriminator: boolean): Meta {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'offsetCount': json['offset_count'],
        'totalCount': json['total_count'],
        'limitCount': json['limit_count'],
        'currentPage': json['current_page'],
        'lastPage': json['last_page'],
        'prevPage': json['prev_page'],
        'nextPage': json['next_page'],
        'sortType': json['sort_type'],
    };
}

export function MetaToJSON(value?: Meta | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'offset_count': value.offsetCount,
        'total_count': value.totalCount,
        'limit_count': value.limitCount,
        'current_page': value.currentPage,
        'last_page': value.lastPage,
        'prev_page': value.prevPage,
        'next_page': value.nextPage,
        'sort_type': value.sortType,
    };
}

