/* tslint:disable */
/* eslint-disable */
/**
 * Company Search API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime"
import type {
  FetchCompanyIds200Response,
  ResponseCompanies,
  ResponseCompany,
  ResponseIndustries,
  ResponseIndustry,
  ResponseIndustryIDs,
  ResponseMarket,
  ResponseMarketIDs,
  ResponseMarkets,
} from "../models"
import {
  FetchCompanyIds200ResponseFromJSON,
  FetchCompanyIds200ResponseToJSON,
  ResponseCompaniesFromJSON,
  ResponseCompaniesToJSON,
  ResponseCompanyFromJSON,
  ResponseCompanyToJSON,
  ResponseIndustriesFromJSON,
  ResponseIndustriesToJSON,
  ResponseIndustryFromJSON,
  ResponseIndustryToJSON,
  ResponseIndustryIDsFromJSON,
  ResponseIndustryIDsToJSON,
  ResponseMarketFromJSON,
  ResponseMarketToJSON,
  ResponseMarketIDsFromJSON,
  ResponseMarketIDsToJSON,
  ResponseMarketsFromJSON,
  ResponseMarketsToJSON,
} from "../models"

export interface FetchCompaniesRequest {
  sortType: FetchCompaniesSortTypeEnum
  page?: number
  q?: string
  industryId?: number
  marketId?: number
}

export interface FetchCompanyRequest {
  code: number
}

export interface FetchIndustryRequest {
  id: number
}

export interface FetchMarketRequest {
  id: number
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Get and Search Companies
   */
  async fetchCompaniesRaw(
    requestParameters: FetchCompaniesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponseCompanies>> {
    if (requestParameters.sortType === null || requestParameters.sortType === undefined) {
      throw new runtime.RequiredError(
        "sortType",
        "Required parameter requestParameters.sortType was null or undefined when calling fetchCompanies.",
      )
    }

    const queryParameters: any = {}

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page
    }

    if (requestParameters.sortType !== undefined) {
      queryParameters["sort_type"] = requestParameters.sortType
    }

    if (requestParameters.q !== undefined) {
      queryParameters["q"] = requestParameters.q
    }

    if (requestParameters.industryId !== undefined) {
      queryParameters["industry_id"] = requestParameters.industryId
    }

    if (requestParameters.marketId !== undefined) {
      queryParameters["market_id"] = requestParameters.marketId
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/api/v1/companies`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ResponseCompaniesFromJSON(jsonValue),
    )
  }

  /**
   * Get and Search Companies
   */
  async fetchCompanies(
    requestParameters: FetchCompaniesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponseCompanies> {
    const response = await this.fetchCompaniesRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Get Company
   */
  async fetchCompanyRaw(
    requestParameters: FetchCompanyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponseCompany>> {
    if (requestParameters.code === null || requestParameters.code === undefined) {
      throw new runtime.RequiredError(
        "code",
        "Required parameter requestParameters.code was null or undefined when calling fetchCompany.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/api/v1/companies/{code}`.replace(
          `{${"code"}}`,
          encodeURIComponent(String(requestParameters.code)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseCompanyFromJSON(jsonValue))
  }

  /**
   * Get Company
   */
  async fetchCompany(
    requestParameters: FetchCompanyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponseCompany> {
    const response = await this.fetchCompanyRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Get CompanyIds
   */
  async fetchCompanyIdsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<FetchCompanyIds200Response>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/api/v1/company_ids`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FetchCompanyIds200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Get CompanyIds
   */
  async fetchCompanyIds(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<FetchCompanyIds200Response> {
    const response = await this.fetchCompanyIdsRaw(initOverrides)
    return await response.value()
  }

  /**
   * Get Industries
   */
  async fetchIndustriesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponseIndustries>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/api/v1/industries`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ResponseIndustriesFromJSON(jsonValue),
    )
  }

  /**
   * Get Industries
   */
  async fetchIndustries(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponseIndustries> {
    const response = await this.fetchIndustriesRaw(initOverrides)
    return await response.value()
  }

  /**
   * Get Industry
   */
  async fetchIndustryRaw(
    requestParameters: FetchIndustryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponseIndustry>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling fetchIndustry.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/api/v1/industries/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseIndustryFromJSON(jsonValue))
  }

  /**
   * Get Industry
   */
  async fetchIndustry(
    requestParameters: FetchIndustryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponseIndustry> {
    const response = await this.fetchIndustryRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Get IndustryIds
   */
  async fetchIndustryIdsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponseIndustryIDs>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/api/v1/industry_ids`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ResponseIndustryIDsFromJSON(jsonValue),
    )
  }

  /**
   * Get IndustryIds
   */
  async fetchIndustryIds(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponseIndustryIDs> {
    const response = await this.fetchIndustryIdsRaw(initOverrides)
    return await response.value()
  }

  /**
   * Get Market
   */
  async fetchMarketRaw(
    requestParameters: FetchMarketRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponseMarket>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling fetchMarket.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/api/v1/markets/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseMarketFromJSON(jsonValue))
  }

  /**
   * Get Market
   */
  async fetchMarket(
    requestParameters: FetchMarketRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponseMarket> {
    const response = await this.fetchMarketRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Get MarketIds
   */
  async fetchMarketIdsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponseMarketIDs>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/api/v1/market_ids`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ResponseMarketIDsFromJSON(jsonValue),
    )
  }

  /**
   * Get MarketIds
   */
  async fetchMarketIds(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponseMarketIDs> {
    const response = await this.fetchMarketIdsRaw(initOverrides)
    return await response.value()
  }

  /**
   * Get Markets
   */
  async fetchMarketsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponseMarkets>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/api/v1/markets`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseMarketsFromJSON(jsonValue))
  }

  /**
   * Get Markets
   */
  async fetchMarkets(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponseMarkets> {
    const response = await this.fetchMarketsRaw(initOverrides)
    return await response.value()
  }
}

/**
 * @export
 */
export const FetchCompaniesSortTypeEnum = {
  NetSales: "net_sales",
  AverageAnnualSalary: "average_annual_salary",
  OrdinaryIncome: "ordinary_income",
} as const
export type FetchCompaniesSortTypeEnum =
  (typeof FetchCompaniesSortTypeEnum)[keyof typeof FetchCompaniesSortTypeEnum]
