/* tslint:disable */
/* eslint-disable */
/**
 * Company Search API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ResponseCompanies,
  ResponseCompany,
  ResponseCompanyIDs,
  ResponseIndustries,
  ResponseIndustry,
  ResponseIndustryIDs,
  ResponseMarket,
  ResponseMarketIDs,
  ResponseMarkets,
} from '../models';
import {
    ResponseCompaniesFromJSON,
    ResponseCompaniesToJSON,
    ResponseCompanyFromJSON,
    ResponseCompanyToJSON,
    ResponseCompanyIDsFromJSON,
    ResponseCompanyIDsToJSON,
    ResponseIndustriesFromJSON,
    ResponseIndustriesToJSON,
    ResponseIndustryFromJSON,
    ResponseIndustryToJSON,
    ResponseIndustryIDsFromJSON,
    ResponseIndustryIDsToJSON,
    ResponseMarketFromJSON,
    ResponseMarketToJSON,
    ResponseMarketIDsFromJSON,
    ResponseMarketIDsToJSON,
    ResponseMarketsFromJSON,
    ResponseMarketsToJSON,
} from '../models';

export interface GetCompanyRequest {
    code: number;
}

export interface GetIndustryRequest {
    id: number;
}

export interface GetMarketRequest {
    id: number;
}

export interface ListCompaniesRequest {
    sortType: ListCompaniesSortTypeEnum;
    page?: number;
    q?: string;
    industryId?: number;
    marketId?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get Company
     */
    async getCompanyRaw(requestParameters: GetCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseCompany>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getCompany.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/companies/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseCompanyFromJSON(jsonValue));
    }

    /**
     * Get Company
     */
    async getCompany(requestParameters: GetCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseCompany> {
        const response = await this.getCompanyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Industry
     */
    async getIndustryRaw(requestParameters: GetIndustryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseIndustry>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getIndustry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/industries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseIndustryFromJSON(jsonValue));
    }

    /**
     * Get Industry
     */
    async getIndustry(requestParameters: GetIndustryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseIndustry> {
        const response = await this.getIndustryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Market
     */
    async getMarketRaw(requestParameters: GetMarketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseMarket>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMarket.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/markets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseMarketFromJSON(jsonValue));
    }

    /**
     * Get Market
     */
    async getMarket(requestParameters: GetMarketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseMarket> {
        const response = await this.getMarketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get and Search Companies
     */
    async listCompaniesRaw(requestParameters: ListCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseCompanies>> {
        if (requestParameters.sortType === null || requestParameters.sortType === undefined) {
            throw new runtime.RequiredError('sortType','Required parameter requestParameters.sortType was null or undefined when calling listCompanies.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.sortType !== undefined) {
            queryParameters['sort_type'] = requestParameters.sortType;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.industryId !== undefined) {
            queryParameters['industry_id'] = requestParameters.industryId;
        }

        if (requestParameters.marketId !== undefined) {
            queryParameters['market_id'] = requestParameters.marketId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/companies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseCompaniesFromJSON(jsonValue));
    }

    /**
     * Get and Search Companies
     */
    async listCompanies(requestParameters: ListCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseCompanies> {
        const response = await this.listCompaniesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CompanyIds
     */
    async listCompanyIdsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseCompanyIDs>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/company_ids`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseCompanyIDsFromJSON(jsonValue));
    }

    /**
     * Get CompanyIds
     */
    async listCompanyIds(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseCompanyIDs> {
        const response = await this.listCompanyIdsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Industries
     */
    async listIndustriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseIndustries>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/industries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseIndustriesFromJSON(jsonValue));
    }

    /**
     * Get Industries
     */
    async listIndustries(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseIndustries> {
        const response = await this.listIndustriesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get IndustryIds
     */
    async listIndustryIdsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseIndustryIDs>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/industry_ids`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseIndustryIDsFromJSON(jsonValue));
    }

    /**
     * Get IndustryIds
     */
    async listIndustryIds(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseIndustryIDs> {
        const response = await this.listIndustryIdsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get MarketIds
     */
    async listMarketIdsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseMarketIDs>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/market_ids`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseMarketIDsFromJSON(jsonValue));
    }

    /**
     * Get MarketIds
     */
    async listMarketIds(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseMarketIDs> {
        const response = await this.listMarketIdsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Markets
     */
    async listMarketsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseMarkets>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/markets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseMarketsFromJSON(jsonValue));
    }

    /**
     * Get Markets
     */
    async listMarkets(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseMarkets> {
        const response = await this.listMarketsRaw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListCompaniesSortTypeEnum = {
    NetSales: 'net_sales',
    AverageAnnualSalary: 'average_annual_salary',
    OrdinaryIncome: 'ordinary_income'
} as const;
export type ListCompaniesSortTypeEnum = typeof ListCompaniesSortTypeEnum[keyof typeof ListCompaniesSortTypeEnum];
