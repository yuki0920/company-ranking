package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// SchemaMigration represents a row from 'public.schema_migrations'.
type SchemaMigration struct {
	Version string `json:"version"` // version
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [SchemaMigration] exists in the database.
func (sm *SchemaMigration) Exists() bool {
	return sm._exists
}

// Deleted returns true when the [SchemaMigration] has been marked for deletion
// from the database.
func (sm *SchemaMigration) Deleted() bool {
	return sm._deleted
}

// Insert inserts the [SchemaMigration] to the database.
func (sm *SchemaMigration) Insert(ctx context.Context, db DB) error {
	switch {
	case sm._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case sm._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.schema_migrations (` +
		`version` +
		`) VALUES (` +
		`$1` +
		`)`
	// run
	logf(sqlstr, sm.Version)
	if _, err := db.ExecContext(ctx, sqlstr, sm.Version); err != nil {
		return logerror(err)
	}
	// set exists
	sm._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the [SchemaMigration] from the database.
func (sm *SchemaMigration) Delete(ctx context.Context, db DB) error {
	switch {
	case !sm._exists: // doesn't exist
		return nil
	case sm._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.schema_migrations ` +
		`WHERE version = $1`
	// run
	logf(sqlstr, sm.Version)
	if _, err := db.ExecContext(ctx, sqlstr, sm.Version); err != nil {
		return logerror(err)
	}
	// set deleted
	sm._deleted = true
	return nil
}

// SchemaMigrationByVersion retrieves a row from 'public.schema_migrations' as a [SchemaMigration].
//
// Generated from index 'schema_migrations_pkey'.
func SchemaMigrationByVersion(ctx context.Context, db DB, version string) (*SchemaMigration, error) {
	// query
	const sqlstr = `SELECT ` +
		`version ` +
		`FROM public.schema_migrations ` +
		`WHERE version = $1`
	// run
	logf(sqlstr, version)
	sm := SchemaMigration{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, version).Scan(&sm.Version); err != nil {
		return nil, logerror(err)
	}
	return &sm, nil
}
