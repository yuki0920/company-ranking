// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Company defines model for Company.
type Company struct {
	AverageAgeYears *float32 `json:"average_age_years"`

	// AverageAnnualSalary 1万で割った値
	AverageAnnualSalary           *float32 `json:"average_annual_salary"`
	AverageLengthOfServiceYears   *float32 `json:"average_length_of_service_years"`
	CapitalStock                  *float32 `json:"capital_stock"`
	CashAndCashEquivalents        *float32 `json:"cash_and_cash_equivalents"`
	CompanyName                   string   `json:"company_name"`
	CompanyNameEn                 string   `json:"company_name_en"`
	ConsolidatedNumberOfEmployees *float32 `json:"consolidated_number_of_employees"`

	// EquityToAssetRatio 自己資本比率
	EquityToAssetRatio *float32 `json:"equity_to_asset_ratio"`
	HeadOfficeLocation string   `json:"head_office_location"`
	IndustryId         float32  `json:"industry_id"`
	IndustryName       string   `json:"industry_name"`

	// LastYearNetSales 1億で割った値
	LastYearNetSales *float32 `json:"last_year_net_sales"`

	// LastYearOperatingIncome 1億で割った値
	LastYearOperatingIncome *float32 `json:"last_year_operating_income"`

	// LastYearOrdinaryIncome 1億で割った値
	LastYearOrdinaryIncome *float32 `json:"last_year_ordinary_income"`
	MarketId               float32  `json:"market_id"`
	MarketName             string   `json:"market_name"`

	// NetAssets 純資産
	NetAssets                                  *float32 `json:"net_assets"`
	NetCashProvidedByUsedInFinancingActivities *float32 `json:"net_cash_provided_by_used_in_financing_activities"`
	NetCashProvidedByUsedInInvestingActivities *float32 `json:"net_cash_provided_by_used_in_investing_activities"`
	NetCashProvidedByUsedInOperatingActivities *float32 `json:"net_cash_provided_by_used_in_operating_activities"`

	// NetSales 1億で割った値
	NetSales          *float32 `json:"net_sales"`
	NumberOfEmployees *float32 `json:"number_of_employees"`

	// OperatingIncome 1億で割った値
	OperatingIncome *float32 `json:"operating_income"`

	// OrdinaryIncome 1億で割った値
	OrdinaryIncome     *float32 `json:"ordinary_income"`
	PeriodEndedAt      string   `json:"period_ended_at"`
	PeriodEndedAtMonth int      `json:"period_ended_at_month"`
	PeriodEndedAtYear  int      `json:"period_ended_at_year"`
	PeriodStartedAt    string   `json:"period_started_at"`

	// PriceEarningsRatio 株価収益率(PER)
	PriceEarningsRatio *float32 `json:"price_earnings_ratio"`

	// RateOfReturnOnEquity 自己資本利益率(ROE)
	RateOfReturnOnEquity *float32 `json:"rate_of_return_on_equity"`
	Representative       string   `json:"representative"`
	SecurityCode         float32  `json:"security_code"`
	SecurityId           float32  `json:"security_id"`
	SecurityName         string   `json:"security_name"`

	// TotalAssets 総資産
	TotalAssets *float32 `json:"total_assets"`
}

// ResponseCompany defines model for responseCompany.
type ResponseCompany struct {
	Company Company `json:"company"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Company
	// (GET /api/v1/companies/{code})
	FetchCompany(w http.ResponseWriter, r *http.Request, code int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// FetchCompany operation middleware
func (siw *ServerInterfaceWrapper) FetchCompany(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code int

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FetchCompany(w, r, code)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/companies/{code}", wrapper.FetchCompany)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RXTYsbRxP+K0u/7yEBsZJWOekWEif4FOMcjWlKMyWp7ZnqcXeNiBCCLBi0yWF9Wcgh",
	"C0lwQogJhMQLji/5M2tJ+zNC94y+RjOyIq8PC2J76qnq+nie6pEIdJxoQmIr2iNhgz7G4H9+ouMEaOh+",
	"JkYnaFihP4ABGuihdH9DBOP/2dUmBhZt0Y00sKgJSqMIOhGKNpsUa4KHCYq2oDTuoBHj2gqGKIVIWojA",
	"eG8h2sCohJUm0RbNN39Prk9/nX7z1/Xp8+vTH6Zf//xf0COkHvel7kqLZqCCdwo5gESxi5V18NhB7GFh",
	"+xIolP4HPknVAKJFst9unZVAEsToDPIPLBtFveIHEqniG7I6UiEwhjLDdunAOIn0EHG/SFzkPJSsJViL",
	"LA2w0tvFupm8mL768+blZHb5++yPi/n5ZJ+09hFCqbtdV51IB5CBlVxFUZhaNkOpwrXzFdDyvDJhEVj2",
	"HSAJ2fVcdv9Cy02fPj2g5VbYblqAFfWkokBnody2CxMqApeK2/UQg3mMXJXg/LQyvS6pvkFKsjq/urh5",
	"OZlfPN8nDAfkRyYxeqBCDGVnKFOLoVQku4qAApdeCFgN1IKY3g1V0QAt3zbqqhUOQL3d/jx09t9bN7+v",
	"Hk7QKB1KJFcLx/AjgV9BnDgTcdI4aU5fX7Vml2et5uy7X0Rtu40LADLWxP0NmNbSShFjr9SvH9QNK+d7",
	"h6FlMFwecmP6+uqj2eVZZcTGkSeCIUU9W0XPsx9fvPnnp+mz8/n3387PJx/cu3P/w30SaoDR9Y1BTg1J",
	"TTLTg90CMD37Lfdz/4s7+/nBxKBFYmA1KGcYi0FqnBQFOsRSjlp+UcFhy/NKFmPtRL6Sx14925fH/JWe",
	"pMpgKNoPNiIrH8eqrahWsnS9fccpZqt4900+X+f+opRuSm9hMdleQyokvSZs2okV5z2+Ve+yQdie5oo5",
	"q5radSYt1/8Shtsp5tvEtUuYi1vjhkgWeq1qz9oxgRWjf4gqHaKPhyj1rq14j3X14XLMdOcRBpwRh000",
	"Wax8swSrg/8b7Iq2+F999fKp58+e+sK+OLkL823fY792dj3ZsmLP1znK0ZcIJugffXzv7tGnOkhjJNe9",
	"AzQ2l7fjxnEjV1iCRIm2aB03j1uuqMB9H3gdElUfNOtZBAptfeRmeezOeuiFIi+mpruhaIvPkIP+4h4O",
	"yECMjO7J82AklPPrwF3lPP+JnBpW182oLEvJGj8u9Wr8cJVwH+NJo5HlmNhd0T0RkyRS2dTXH9lsm18B",
	"7qpAsZI+wZsE3EM+Wi+UTePYPx3F5xsn4/G/AQAA///suGBV3g4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
