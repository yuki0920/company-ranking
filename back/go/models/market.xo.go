package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Market represents a row from 'public.markets'.
type Market struct {
	ID   int64  `json:"id"`   // id
	Name string `json:"name"` // name
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Market] exists in the database.
func (m *Market) Exists() bool {
	return m._exists
}

// Deleted returns true when the [Market] has been marked for deletion
// from the database.
func (m *Market) Deleted() bool {
	return m._deleted
}

// Insert inserts the [Market] to the database.
func (m *Market) Insert(ctx context.Context, db DB) error {
	switch {
	case m._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case m._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.markets (` +
		`name` +
		`) VALUES (` +
		`$1` +
		`) RETURNING id`
	// run
	logf(sqlstr, m.Name)
	if err := db.QueryRowContext(ctx, sqlstr, m.Name).Scan(&m.ID); err != nil {
		return logerror(err)
	}
	// set exists
	m._exists = true
	return nil
}

// Update updates a [Market] in the database.
func (m *Market) Update(ctx context.Context, db DB) error {
	switch {
	case !m._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case m._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.markets SET ` +
		`name = $1 ` +
		`WHERE id = $2`
	// run
	logf(sqlstr, m.Name, m.ID)
	if _, err := db.ExecContext(ctx, sqlstr, m.Name, m.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Market] to the database.
func (m *Market) Save(ctx context.Context, db DB) error {
	if m.Exists() {
		return m.Update(ctx, db)
	}
	return m.Insert(ctx, db)
}

// Upsert performs an upsert for [Market].
func (m *Market) Upsert(ctx context.Context, db DB) error {
	switch {
	case m._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.markets (` +
		`id, name` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name `
	// run
	logf(sqlstr, m.ID, m.Name)
	if _, err := db.ExecContext(ctx, sqlstr, m.ID, m.Name); err != nil {
		return logerror(err)
	}
	// set exists
	m._exists = true
	return nil
}

// Delete deletes the [Market] from the database.
func (m *Market) Delete(ctx context.Context, db DB) error {
	switch {
	case !m._exists: // doesn't exist
		return nil
	case m._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.markets ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, m.ID)
	if _, err := db.ExecContext(ctx, sqlstr, m.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	m._deleted = true
	return nil
}

// MarketByName retrieves a row from 'public.markets' as a [Market].
//
// Generated from index 'index_markets_on_name'.
func MarketByName(ctx context.Context, db DB, name string) (*Market, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name ` +
		`FROM public.markets ` +
		`WHERE name = $1`
	// run
	logf(sqlstr, name)
	m := Market{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, name).Scan(&m.ID, &m.Name); err != nil {
		return nil, logerror(err)
	}
	return &m, nil
}

// MarketByID retrieves a row from 'public.markets' as a [Market].
//
// Generated from index 'markets_pkey'.
func MarketByID(ctx context.Context, db DB, id int64) (*Market, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name ` +
		`FROM public.markets ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	m := Market{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&m.ID, &m.Name); err != nil {
		return nil, logerror(err)
	}
	return &m, nil
}
